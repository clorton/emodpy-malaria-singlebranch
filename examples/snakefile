import os
import pathlib
from sys import platform
from pathlib import Path

dirs = os.listdir()
input_files = list()

def get_command(path: Path=None, script="example.py"):
    # using pushd (i.e. cd into directory) to use script location as base dir, otherwise relative
    # paths in script use snakemake dir as base
    if platform == "linux":
        command = "pushd " + path + " && python3 " + script
    elif platform == "win32":
        command = "pushd " + path + " && python " + script
    else:
        print("Unknown OS")
        raise Exception  
    return command
    

# Not sure about start_here, there seems to be an issue with comps2
skip_tests = ["download_files",
              "outdoor_rest_kill_male_mosquitoes",
              "burnin_use",
			  # "migration_spatial_malaria_sim",	# needs vpn connection
			  # "migration_spatial_vector_sim",		# needs vpn connection
              "filtered_report"]

for dir in dirs:
    if os.path.isdir( dir ) and str( dir ).startswith( "." ) == False and os.path.exists( dir + "/example.py" ):
        if dir in skip_tests:
            continue
        input_files.append(str(pathlib.PurePath(dir, "experiment_id")))

print( input_files )

rule run:
    input: input_files
    output:
    shell: ""
	
rule start_here:
    input: 
    output: Path("start_here", "experiment_id")
    run:
        shell(get_command("start_here"))
		
rule filtered_report:
    input: 
    output: Path("filtered_report", "experiment_id")
    run:
        shell(get_command("filtered_report"))
		
rule burnin_create:
    input: 
    output: Path("burnin_create", "experiment_id"),
            out_020_0 = Path("burnin_create", "serialization_files", "output", "state-00020-000.dtk"),
            out_020_1 = Path("burnin_create", "serialization_files", "output", "state-00020-001.dtk"),
            out_200_0 = Path("burnin_create", "serialization_files", "output", "state-00200-000.dtk"),
            out_200_1 = Path("burnin_create", "serialization_files", "output", "state-00200-001.dtk")           
    run:
        shell(get_command("burnin_create"))
		
rule burnin_create_infections:
    input: 
    output: Path("burnin_create_infections", "experiment_id"),
            out_050 = Path("burnin_create_infections", "serialization_files", "output", "state-00050.dtk")
    run:
        shell(get_command("burnin_create_infections"))
		
rule burnin_use:
    input: 
    output: Path("burnin_use", "experiment_id")
    run:
        shell(get_command("burnin_use"))
		
rule serialization_remove_infections:
    input:  rules.burnin_create_infections.output.out_050
    output: Path("serialization_remove_infections", "output", "state-00050_zeroed.dtk"),
            Path("serialization_remove_infections", "experiment_id")
    run:
        shell(get_command("serialization_remove_infections"))
        
rule drug_campaign:
    input: 
    output: Path("drug_campaign","experiment_id")
    run:
        shell(get_command("drug_campaign"))
		
rule ivermectin:
    input: 
    output: Path("ivermectin", "experiment_id")
    run:        
        shell(get_command("ivermectin"))
		
rule jonr_1:
    input: 
    output: Path("jonr_1", "experiment_id")
    run:        
        shell(get_command("jonr_1"))
		
rule kill_only_males_camp_sweep:
    input: 
    output: Path("kill_only_males_camp_sweep", "experiment_id")
    run:        
        shell(get_command("kill_only_males_camp_sweep"))
		
rule male_vector_fertility_test:
    input: 
    output: Path("male_vector_fertility_test", "experiment_id")
    run:       
        shell(get_command("male_vector_fertility_test"))
		
rule outdoor_rest_kill_male_mosquitoes:
    input: 
    output: Path("outdoor_rest_kill_male_mosquitoes", "experiment_id")
    run:        
        shell(get_command("outdoor_rest_kill_male_mosquitoes"))
		
rule simple_sim_template_emodpy:
    input: 
    output: Path("simple-sim-template-emodpy", "experiment_id")
    run:        
        shell(get_command("simple_sim_template_emodpy"))
		
rule campaign_sweep:
    input: 
    output: Path("campaign_sweep", "experiment_id")
    run:        
        shell(get_command("campaign_sweep"))
		
rule demographics_sweep:
    input: 
    output: Path("demographics_sweep", "experiment_id")
    run:        
        shell(get_command("demographics_sweep"))
rule input_eir:
    input: 
    output: Path("inputEIR", "experiment_id")
    run:        
        shell(get_command("inputEIR"))
		
rule vector_basic:
    input: 
    output: Path("vector_basic", "experiment_id")
    run:        
        shell(get_command("vector_basic"))
rule vector_genetics_vector_sim:
    input: 
    output: Path("vector_genetics_vector_sim", "experiment_id")
    run:        
        shell(get_command("vector_genetics_vector_sim"))
rule vgir:
    input: 
    output: Path("vector_genetics_insecticide_resistance", "experiment_id")
    run:        
        shell(get_command("vector_genetics_insecticide_resistance"))
		
rule diagnostic_survey:
    input: 
    output: Path("diagnostic_survey", "experiment_id")
    run:        
        shell(get_command("diagnostic_survey"))
		
rule migration_spatial_vector_sim:
    input: 
    output: Path("migration_spatial_vector_sim", "experiment_id")
    run:        
        shell(get_command("migration_spatial_vector_sim"))
		
rule migration_spatial_malaria_sim:
    input: 
    output: Path("migration_spatial_malaria_sim", "experiment_id")
    run:        
        shell(get_command("migration_spatial_malaria_sim"))
		
rule add_reports:
    input: 
    output: Path("add_reports", "experiment_id")
    run:       
        shell(get_command("add_reports"))

rule run_with_unobserved_importation:
    input:
    output: Path("run_with_unobserved_importation", "experiment_id")
    run:        
        shell(get_command("run_with_unobserved_importation"))

rule example_template:
    input:
    output: Path("example_template", "experiment_id")
    run:        
        shell(get_command("example_template"))
		
rule fpg_example:
    input:
    output: Path("fpg_example", "experiment_id")
    run:        
        shell(get_command("fpg_example"))
		
rule download_files:
    input:
    output: Path("download_files", "experiment_id")
    run:        
        shell(get_command("download_files"))

rule rcd_elimination_emodpy:
    input: 
    output: Path("rcd_elimination_emodpy", "experiment_id")
    run:        
        shell(get_command("rcd_elimination_emodpy"))

rule clean:
    input: 
    output: 
    run:
        for input_file in input_files:
            if os.path.exists( input_file ):
                os.remove(input_file)
